[1mdiff --git a/code/asp_q.py b/code/asp_q.py[m
[1mindex 8b68210..aca2527 100644[m
[1m--- a/code/asp_q.py[m
[1m+++ b/code/asp_q.py[m
[36m@@ -2,6 +2,7 @@[m [mimport function[m
 import rand_generator[m
 import graphing[m
 import numpy as np[m
[32m+[m[32mimport pagerank[m[41m[m
 from pprint import pprint[m
 [m
 [m
[36m@@ -9,7 +10,7 @@[m [mdef one_nine():[m
     rate_param = 2[m
     exp_dist = function.ExponentialDist(rate_param)[m
     log_rate = function.LogRate(rate_param)[m
[31m-    gen = rand_generator.Generator(log_rate, 100000)[m
[32m+[m[32m    gen = rand_generator.Generator(log_rate, [100000])[m[41m[m
     gen.populate_zero_one()[m
     results = gen.eval()[m
     hist = graphing.Histogram()[m
[36m@@ -58,5 +59,50 @@[m [mdef two_eight():[m
     hist.add_line(exp_dist, np.linspace(1, max_val, max_val), 'ro--', label='p(k)')[m
     hist.show()[m
 [m
[32m+[m[32mdef two_nine():[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    sample_counts = [5, 10, 33, 100, 333, 1000, 3333, 10000, 33333, 100000, 333333, 1000000, 3333333, 10000000][m[41m[m
[32m+[m[32m    estimates = np.empty(len(sample_counts))[m[41m[m
[32m+[m[32m    magnitude = function.Magnitude()[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    for i in range(len(sample_counts)):[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        count = 0[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        gen = rand_generator.Generator(magnitude, [2, sample_counts[i]])[m[41m[m
[32m+[m[32m        gen.populate_zero_one()[m[41m[m
[32m+[m[32m        results = gen.eval()[m[41m[m
[32m+[m[32m        for value in results:[m[41m[m
[32m+[m[32m            if value <= 1:[m[41m[m
[32m+[m[32m                count += 1[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        estimates[i] = count/sample_counts[i]*4[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    plot = graphing.LineGraph()[m[41m[m
[32m+[m[32m    plot.init_line()[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    plot.add_line(sample_counts, estimates, 'b+', markersize=14, label='Estimated Value')[m[41m[m
[32m+[m[32m    plot.add_line(sample_counts, [np.pi]*len(sample_counts), 'r', label='Pi')[m[41m[m
[32m+[m[32m    plot.add_title('ASP Q2.9: Estimate of Pi against sample count N')[m[41m[m
[32m+[m[32m    plot.label_axis('N', 'Estimate')[m[41m[m
[32m+[m[32m    plot.log_axes(True, False)[m[41m[m
[32m+[m[32m    plot.set_axes(0, 33333333, 1.5, 4.5)[m[41m[m
[32m+[m[32m    plot.show_legend()[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    plot.show()[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef two_ten():[m[41m[m
[32m+[m[32m    graph = [[1, 2], [1, 3], [1, 4], [1, 5],[m[41m[m
[32m+[m[32m        [2, 4],[m[41m[m
[32m+[m[32m        [3, 4],[m[41m[m
[32m+[m[32m        [4, 3], [4, 5],[m[41m[m
[32m+[m[32m        [5, 2], [5, 3], [5, 4]][m[41m[m
[32m+[m[41m[m
[32m+[m[32m    print(pagerank.rank(graph, 0.85, 0.000000001))[m[41m[m
[32m+[m[32m    print(pagerank.rank(graph, 1, 0.0000000001))[m[41m[m
[41m+[m
[41m+[m
[41m+[m
[41m+[m
 [m
 [m
[1mdiff --git a/code/function.py b/code/function.py[m
[1mindex 1877d0a..9c3d622 100644[m
[1m--- a/code/function.py[m
[1m+++ b/code/function.py[m
[36m@@ -36,3 +36,11 @@[m [mclass LogRate(Function):[m
 [m
     def eval(self, variables):[m
         return -1 * np.log(variables) / self.rate[m
[32m+[m[41m[m
[32m+[m[32mclass Magnitude(Function):[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def __init__(self):[m[41m[m
[32m+[m[32m        self.name = 'magnitude'[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def eval(self, variables):[m[41m[m
[32m+[m[32m        return np.linalg.norm(variables, axis=0)[m[41m[m
[1mdiff --git a/code/graphing.py b/code/graphing.py[m
[1mindex b41c2c8..ae66f21 100644[m
[1m--- a/code/graphing.py[m
[1m+++ b/code/graphing.py[m
[36m@@ -30,6 +30,9 @@[m [mclass Graph_2d:[m
         self.x_axis = x_axis[m
         self.y_axis = y_axis[m
 [m
[32m+[m[32m    def show_legend(self):[m[41m[m
[32m+[m[32m        self.legend = True[m[41m[m
[32m+[m[41m[m
     def show_features(self):[m
         if self.line:[m
             self.plot_line()[m
[36m@@ -125,3 +128,28 @@[m [mclass Histogram(Graph_2d):[m
             0,[m
             np.max(self.n) * 1.125[m
         ][m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass LineGraph(Graph_2d):[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def init_line(self):[m[41m[m
[32m+[m[32m        self.fig = plt.figure()[m[41m[m
[32m+[m[32m        self.ax = self.fig.add_subplot(1, 1, 1)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def add_line(self, x_val, y_val, prop_string, **kwargs):[m[41m[m
[32m+[m[32m        self.ax.plot(x_val,  y_val, prop_string, **kwargs)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def show(self):[m[41m[m
[32m+[m[32m        self.show_features()[m[41m[m
[32m+[m[32m        self.save_graph(self.fig)[m[41m[m
[32m+[m[32m        self.fig.show()[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def log_axes(self, x, y):[m[41m[m
[32m+[m[32m        if x:[m[41m[m
[32m+[m[32m            self.ax.set_xscale('log')[m[41m[m
[32m+[m[32m        if y:[m[41m[m
[32m+[m[32m            self.ax.set_yscale('log')[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def set_axes(self, x_min, x_max, y_min, y_max):[m[41m[m
[32m+[m[32m        self.ax.axis([x_min, x_max, y_min, y_max])[m[41m[m
[41m+[m
[1mdiff --git a/code/rand_generator.py b/code/rand_generator.py[m
[1mindex e863143..2a15618 100644[m
[1m--- a/code/rand_generator.py[m
[1m+++ b/code/rand_generator.py[m
[36m@@ -11,7 +11,11 @@[m [mclass Generator:[m
         self.samples = samples[m
 [m
     def populate_zero_one(self):[m
[31m-        self.samples = np.random.rand(self.samples)[m
[32m+[m[32m        if len(self.samples) == 1:[m[41m[m
[32m+[m[32m            self.samples = np.random.rand(self.samples)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        elif len(self.samples) == 2:[m[41m[m
[32m+[m[32m            self.samples = np.random.rand(self.samples[0], self.samples[1])[m[41m[m
 [m
     def eval(self):[m
         return self.dist.eval(self.samples)[m
\ No newline at end of file[m
